#! /usr/bin/env python

""" TODO

"""

import pathlib

import waves
import numpy
import SCons.Defaults

from model_package.DNS_Ratel import simulation_variables_nominal

# Inherit the parent construction environment
Import('env')

# set project-wide paths with os-agnostic path separators
DNS_Ratel_abspath = pathlib.Path(env["DNS_Ratel_abspath"])
filter_source_abspath = pathlib.Path(env["filter_source_abspath"])
calibrate_source_abspath = pathlib.Path(env["calibrate_source_abspath"])
Tardigrade_MOOSE_source_abspath = pathlib.Path(env["Tardigrade_MOOSE_source_abspath"])
model_package_abspath = pathlib.Path(env["model_package_abspath"])
peta_data_copy_abspath = pathlib.Path(env["peta_data_copy_abspath"])

# Simulation variables
build_directory = pathlib.Path(Dir('.').abspath)
workflow_name = build_directory.name
workflow_configuration = [env["project_configuration"], workflow_name]
output_file_type = "h5"
model = "I41_02_elastic_single_domains"
params = simulation_variables_nominal.I41_RVEs

# Collect the target nodes to build a concise alias for all targets
workflow = []

# specify targets for visualizing Micromorphic Filter output
viz_targs =  (
    ('plot-cauchy-couple', 'cauchy_couple.png'),
    ('plot-cauchy-stress', 'cauchy_stress.png'),
    ('plot-PK2-stress', 'PK2_stress.png'),
    ('plot-symm-stress', 'symm_stress.png'),
    ('plot-SIGMA-stress', 'SIGMA_stress.png'),
    ('plot-stress-diff', 'stress_diff.png'),
    ('plot-body-couples', 'body_couples.png'),
    ('plot-spin-inertias', 'micro_spin_inertias.png'),
    ('plot-spin-diff', 'spin_diff.png'),
    ('plot-stress-norms', 'stress_norms.png'),
    ('csv-cauchy', 'cauchy.csv'),
    ('csv-PK2', 'PK2.csv'),
    ('csv-GLstrain', 'GLstrain.csv'),
    ('csv-estrain', 'estrain.csv'),
    ('csv-ref-mod', 'ref_moduli.csv'),
    ('csv-cur-mod', 'cur_moduli.csv'),
    ('csv-symm', 'symm.csv'),
    ('csv-stress-diff', 'stress_diff.csv'),
    ('csv-m', 'm_stress.csv'),
    ('csv-M', 'M_stress.csv'),
    ('csv-stress33-all', 'all_33_stresses.csv'),
    ('csv-all-quantities-single-domain', 'all_quantities.csv'),
    )
params['viz_targs'] = viz_targs

# ---------- Process existing DNS ----------------------------------------------
results_files = [f"{peta_data_copy_abspath}/{file.split('/')[-1]}" for file in params['DNS_files']]

# Filter prep - Extract results to XDMF
main_XDMF_name = f"FILTER_INPUT_{model}"
filter_inputs = [f"{main_XDMF_name}.{ext}" for ext in ['xdmf', 'h5']]
XDMF_script = "vtk_to_xdmf.py"
script_options = f"--input-files {' '.join(results_files)}"
script_options += f" --output-file {str(build_directory / main_XDMF_name)}"
script_options += " --dist-factor 0.001"
script_options += " --stress-factor 1.e-6"
script_options += " --density-factor 1.e-12"
workflow.extend(env.PythonScript(
    target=filter_inputs,
    source=[str(DNS_Ratel_abspath / XDMF_script)] + results_files,
    script_options=script_options))
filter_inputs = [f"{str(build_directory / main_XDMF_name)}.{ext}" for ext in ['xdmf', 'h5']]

# Post-processing step - force vs. displacement
plot_script = "plot_force_displacement.py"
force_results = f"{peta_data_copy_abspath}/{params['DNS_forces'].split('/')[-1]}"
force_plot_targets = [f"{model}_force_displacement.png", f"{model}_force_displacement.csv"]
script_options = f"--csv-file {force_results}"
script_options += f" --output-file {force_plot_targets[0]}"
script_options += f" --output-csv {force_plot_targets[1]}"
script_options += " --face-id 3"
script_options += " --force-col force_z"
script_options += " --header-row 0"
script_options += f" --final-disp {params['macro_disp']}"
script_options += " --force-factor 1.e-12"
workflow.extend(env.PythonScript(
    target=[force_plot_targets],
    source=[str(DNS_Ratel_abspath / plot_script)],
    script_options=script_options,
    ))

# # Get image of DNS results
# paraview_script= "get_paraview_image.py"
# paraview_image = f"{model}_Cauchy.png"
# script_options = f"--input-file {results_files[-1]}"
# script_options += f" --output-file {paraview_image}"
# script_options += " --field diagnostic_quantitiesprojected.Cauchy_stress_zz"
# script_options += " --field-min -10.0 --field-max 0.0"
# script_options += " --legend-title 'Cauchy Stress 33 (MPa)'"
# workflow.extend(env.ParaviewImage(
    # target=paraview_image,
    # source=[str(model_package_abspath / paraview_script)] + results_files,
    # script=str(model_package_abspath / paraview_script),
    # script_options=script_options))

# # ---------- FILTER ------------------------------------------------------------
# setup several options for different studies
parameter_schema = dict(
    parameter_samples = numpy.array([
        [0.25,  [0.,0.,0.],    'center'],
        [0.5,   [0.,0.,0.],    'center'],
        [1.0,   [0.,0.,0.],    'center'],
        [0.25,  [-1.,-1.,0.5], 'offset'],
        [0.5,   [-1.,-1.,0.5], 'offset'],
        [1.0,   [-1.,-1.,0.5], 'offset'],
        ], dtype=object),
    parameter_names = numpy.array(["RVE_width", "offset", "name"])
)

parameter_generator = waves.parameter_generators.CustomStudy(parameter_schema)
for set_name, parameters in parameter_generator.parameter_study_to_dict().items():
    set_name = pathlib.Path(set_name)

    # unpack and store some parameters/variables
    RVE_width = parameters['RVE_width']
    parameters['seed_size'] = RVE_width
    offset = numpy.array(parameters['offset'])
    domain_number = 1
    parameters['num_domains'] = domain_number

    # handle names for filter results and targets
    split=str(RVE_width).split('.')
    RVE_string=f'{split[0]}p{split[1]}'
    filter_results = f"FILTER_RESULTS_{model}_{RVE_string}_{parameters['name']}"
    filter_targs = [f"{filter_results}.{ext}" for ext in ['xdmf', 'h5']]
    params['filter_targs'] = filter_targs

    # create lower and upper bounds from center of DNS, offset, and RVE_width
    center = numpy.array([params['diam']/2, params['diam']/2, params['height']/2])
    half_width = numpy.array([RVE_width/2, RVE_width/2, RVE_width/2])
    lower = center + offset - half_width
    upper = center + offset + half_width

    # create bounds for macroscale
    bounding_csv = f"{model}_{RVE_string}_{parameters['name']}_bounds.csv"
    bounding_script = "force_bounds.py"
    bounding_script = "force_bounds.py"
    script_options = f"--xmin {lower[0]} --xmax {upper[0]}"
    script_options += f" --ymin {lower[1]} --ymax {upper[1]}"
    script_options += f" --zmin {lower[2]} --zmax {upper[2]}"
    script_options += f" --output-file {bounding_csv}"
    workflow.extend(env.PythonScript(
        target=bounding_csv,
        source=[str(filter_source_abspath / bounding_script)],
        script_options=script_options
        ))
    params['bounding_csv'] = str(build_directory / bounding_csv)

    # ---------- FILTER ---------------------------------------------------------------
    # Run common filter sconscript
    if env['filter']:
        variant_dir = build_directory / set_name
        workflow.extend(
            SConscript("filter.scons", variant_dir=variant_dir,
                       exports=["env", "parameters", "workflow_name", "model", "params", "filter_inputs"],
                       duplicate=False))

    # ---------- CALIBRATE ------------------------------------------------------------
    # Run common calibration sconscript
    case = params['calibration_case']
    if env['calibrate']:
        filter_file = str(build_directory / set_name / filter_targs[0])
        params['filter_file'] = filter_file
        variant_dir = build_directory / set_name
        workflow.extend(
            SConscript("calibrate_element.scons", variant_dir=variant_dir,
                       exports=["env", "parameters", "workflow_name", "model", "params"],
                       duplicate=False))
    params['parameter_sets'] = [f'calibrated_parameters_case_{case}_elem_0.yml']

# ---------- Collect Results across Studies ------------------------------------
# Run common post-processing sconscript
if env['summary']:
    study = parameter_generator.parameter_study_to_dict()
    set_names = [pathlib.Path(set_name) for set_name, _ in study.items()]
    num_domains = [str(study[key]['num_domains']) for key in study.keys()]
    dns_forces = force_plot_targets[1]

    workflow.extend(
        SConscript("summarize_multi_domain.scons",
                   exports=["env", "workflow_name", "model", "params", "set_names", "num_domains", "dns_forces"],
                   duplicate=False))

# ---------- ARCHIVE -----------------------------------------------------------
# Archive
archive_DNS = True
if archive_DNS:
    archive_name = f"{env['project_name']}-{env['version']}"
    archive_target = env.Tar(
        target=archive_name,
        source=workflow + workflow_configuration)

# Collector alias based on parent directory name
env.Alias(workflow_name, workflow)
env.Alias(f"{workflow_name}_archive", archive_target)