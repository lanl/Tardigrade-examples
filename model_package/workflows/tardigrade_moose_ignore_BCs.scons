#! /usr/bin/env python
"""
    TODO
"""
import pathlib

import waves
import SCons.Defaults

# Inherit the parent construction environment
Import("env")
Import("parameters")
Import("workflow_name")
Import("model")
Import("params")
Import("calibration_map")

# Set project-wide paths
Tardigrade_MOOSE_source_abspath = pathlib.Path(env["Tardigrade_MOOSE_source_abspath"])
mesh_templates_abspath = pathlib.Path(env["mesh_templates_abspath"])

# workflow variables
build_directory = pathlib.Path(Dir(".").abspath)
workflow_configuration = [env["project_configuration"], workflow_name]
domain_number = parameters['num_domains']
seed_size = parameters['seed_size']
bounding_csv = params['bounding_csv']
case = params['calibration_case']
cut = params['cut']
#parameter_sets = params['parameter_sets_ignore_BCs']

# Collect the target nodes to build a concise alias for all targets
workflow = []

# Only run multi-domain cases
tardi_mesh_name = f"TARDIGRADE-MOOSE_{model}_mesh_{domain_number}_elements"
tardi_mesh_1 = f"{tardi_mesh_name}.e"
tardi_mesh_2 = tardi_mesh_1.split('.')[0] + '_with_blocks.e'
# Build macro mesh if Cubit is found, otherwise copy a template
if env['cubit']:
    mesh_script = 'cylinder_from_bounds.py'
    script_options = f"--output-file {tardi_mesh_name}"
    script_options += f" --bounds-file {bounding_csv}"
    script_options += f" --seed-size {seed_size}"
    script_options += f" --xdmf False"
    if cut:
        script_options += f" --cut cut"
    workflow.extend(env.PythonScript(
        target=[tardi_mesh_1],
        source=[str(Tardigrade_MOOSE_source_abspath / mesh_script), bounding_csv],
        script_options=script_options
        ))
    # Create new exodus mesh with individual element blocks defined
    # TODO: figure out better way to store material parameters for individual elements --> issue #27 will replace this step!
    mesh_script = 'add_element_blocks_to_mesh.py'
    script_options = f"--input-mesh {tardi_mesh_1}"
    script_options += f" --output-mesh {tardi_mesh_2}"
    script_options += f" --elements {domain_number}"
    workflow.extend(env.PythonScript(
        target=[tardi_mesh_2],
        source=[str(Tardigrade_MOOSE_source_abspath / mesh_script), tardi_mesh_1],
        script_options=script_options
        ))
else:
    seed_str = f"{str(seed_size).split('.')[0]}p{str(seed_size).split('.')[-1]}"
    mesh_copy = f"{params['mesh_copy_root']}_{seed_str}_{domain_number}_elements_with_blocks.e"
    workflow.extend(env.Command(
        target=[tardi_mesh_2],
        source=[f"{mesh_templates_abspath}/{mesh_copy}"],
        action=SCons.Defaults.Copy("${TARGET}", "${SOURCE}", False)
        ))

# build input file
tardigrade_input_script = "build_Tardigrade_input_deck.py"
tardi_sim_name = f'TARDIGRADE-MOOSE_{model}_{domain_number}_elements_calib_case_{case}_ignore_BCs'
tardigrade_build_targs = f"{tardi_sim_name}.i"
script_options = f"--output-file {tardigrade_build_targs}"
#script_options += f" --parameter-sets {' '.join(parameter_sets)}"
script_options += f" --calibration-map {calibration_map}"
script_options += f" --mesh {tardi_mesh_2}"
script_options += f" --BCs {params['macro_BC']}"
script_options += f" --disp {params['macro_disp']}"
script_options += f" --duration {params['macro_duration']}"
workflow.extend(env.PythonScript(
    target = [tardigrade_build_targs],
    source = [f"{Tardigrade_MOOSE_source_abspath / tardigrade_input_script}", tardi_mesh_2, calibration_map],
    script_options = script_options
))

# run Tardigrade-MOOSE
tardigrade_moose_targs = [f'{tardi_sim_name}_out.e', f'{tardi_sim_name}_out.csv']
workflow.extend(env.TardigradeSolver(
    target = tardigrade_moose_targs,
    source = [tardigrade_build_targs, tardi_mesh_2],
    tardigrade_program = env['Tardigrade'],
    tardigrade_input = tardigrade_build_targs,
    tardigrade_threads =  env['solve_cpus'],
    stdout_file = f"{tardigrade_moose_targs[0]}.stdout"
))

# plot force vs displacement
plot_script = "plot_force_displacement.py"
plot_targets = [f"{tardi_sim_name}_force_displacement.png", f"{tardi_sim_name}_force_displacement.csv"]
script_options = f"--csv-file {tardigrade_moose_targs[1]}"
script_options += f" --output-file {plot_targets[0]}"
script_options += f" --output-csv {plot_targets[1]}"
script_options += f" --final-disp {params['macro_disp']}"
workflow.extend(env.PythonScript(
    target=[plot_targets],
    source=[str(Tardigrade_MOOSE_source_abspath / plot_script)],
    script_options=script_options,
    ))

env.Alias(workflow_name, workflow)
Return("workflow")