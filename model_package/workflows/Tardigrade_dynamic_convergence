#! /usr/bin/env python

""" TODO

"""

import pathlib

import waves
import numpy
import SCons.Defaults

from model_package.Tardigrade_MOOSE import simulation_variables_nominal

# Inherit the parent construction environment
Import('env')

# set project-wide paths with os-agnostic path separators
Tardigrade_MOOSE_source_abspath = pathlib.Path(env["Tardigrade_MOOSE_source_abspath"])
mesh_templates_abspath = pathlib.Path(env["mesh_templates_abspath"])
model_package_abspath = pathlib.Path(env["model_package_abspath"])

# Simulation variables
build_directory = pathlib.Path(Dir('.').abspath)
workflow_name = build_directory.name
workflow_configuration = [env["project_configuration"], workflow_name]
output_file_type = "h5"
model = "elastic_dynamic_convergence"
params = simulation_variables_nominal.dynamic_elastic_cylinder

# Collect the target nodes to build a concise alias for all targets
workflow = []

parameter_schema = dict(
    parameter_samples = numpy.array([
        [192, 1.0, 1],
        [960, 0.5, 1],
        [2520, 0.375, 2],
        [7680, 0.25, 5],
        ], dtype=object),
    parameter_names = numpy.array(["elements", "seed_size", "cpus"]))

parameter_generator = waves.parameter_generators.CustomStudy(parameter_schema)
for set_name, parameters in parameter_generator.parameter_study_to_dict().items():
    set_name = pathlib.Path(set_name)

    elements = parameters['elements']
    seed_size = parameters['seed_size']
    solve_cpus = parameters['cpus']

    # Copy template mesh
    seed_str = f"{str(seed_size).split('.')[0]}p{str(seed_size).split('.')[-1]}"
    mesh_copy = f"{params['mesh_copy_root']}_{seed_str}_{elements}_elements.e"
    tardi_mesh = f"TARDIGRADE-MOOSE_{model}_mesh_{elements}.e"
    workflow.extend(env.Command(
        target=[str(set_name / tardi_mesh)],
        source=[f"{mesh_templates_abspath}/{mesh_copy}"],
        action=SCons.Defaults.Copy("${TARGET}", "${SOURCE}", False)
        ))

    # Write elastic material card
    material_script = 'write_elastic_material_card.py'
    material_card = 'elastic_material_card.yml'
    E, nu = params['material_E'], params['material_nu']
    lamb = E*nu / ((1. + nu)*(1. - 2*nu))
    mu = E / (2*(1. + nu))
    script_options = f'--output-file {material_card}'
    script_options += f' --lamb {lamb}'
    script_options += f' --mu {mu}'
    workflow.extend(env.PythonScript(
        target=[str(set_name / material_card)],
        source=[str(Tardigrade_MOOSE_source_abspath / material_script)],
        script_options=script_options
        ))

    # build input file
    tardigrade_input_script = "build_dynamic_Tardigrade_input_deck.py"
    tardi_sim_name = f'TARDIGRADE-MOOSE_{model}_{elements}'
    tardigrade_build_targs = f"{tardi_sim_name}.i"
    tardigrade_build_sources = [str(set_name / source) for source in [tardi_mesh, material_card]]
    script_options = f"--output-file {tardigrade_build_targs}"
    script_options += f" --parameter-sets {material_card}"
    script_options += f" --mesh {tardi_mesh}"
    script_options += f" --BCs {params['macro_BC']}"
    script_options += f" --pressure {params['pressure']}"
    script_options += f" --duration {params['duration']}"
    dt = params['duration'] / params['num_steps']
    script_options += f" --dt {dt}"
    script_options += f" --start {params['finite_rise'] * dt}"
    script_options += f" --ref-density {params['material_rho']}"
    script_options += f" --height {params['height']}"
    workflow.extend(env.PythonScript(
        target = [str(set_name / tardigrade_build_targs)],
        source = [f"{Tardigrade_MOOSE_source_abspath / tardigrade_input_script}", ],
        script_options = script_options
    ))
    tardigrade_build_sources.append(str(set_name / tardigrade_build_targs))

    # run Tardigrade-MOOSE
    if env['mpi']:
        mpi_location = env["mpi"]
    else:
        mpi_location = []
    tardigrade_moose_targs = [str(set_name / targ) for targ in [f'{tardi_sim_name}_out.e', f'{tardi_sim_name}_out.csv']]
    workflow.extend(env.TardigradeSolver(
        target = tardigrade_moose_targs,
        source = tardigrade_build_sources,
        LD_LIBRARY_PATH = env['LD_PATH'],
        tardigrade_program = env['Tardigrade'],
        tardigrade_input = tardigrade_build_targs,
        tardigrade_cpus =  solve_cpus,
        stdout_file = f"{tardi_sim_name}_out.e.stdout",
        mpi_location = mpi_location,
        ))

    # plot displacement vs time
    plot_script = "plot_dynamic_displacement.py"
    plot_targets = [f"{tardi_sim_name}_dynamic_displacement.png", f"{tardi_sim_name}_dynamic_displacement.csv"]
    script_options = f"--csv-file {tardigrade_moose_targs[1].split('/')[-1]}"
    script_options += f" --output-file {plot_targets[0]}"
    script_options += f" --output-csv {plot_targets[1]}"
    script_options += f" --disp-factor -1"
    workflow.extend(env.PythonScript(
        target=[str(set_name / targ) for targ in plot_targets],
        source=[str(Tardigrade_MOOSE_source_abspath / plot_script), tardigrade_moose_targs[-1]],
        script_options=script_options,
        ))

# Summarize force vs displacements and lateral displacemens
disp_csvs, element_labels = [], []
for set_name, parameters in parameter_generator.parameter_study_to_dict().items():
    elements = parameters['elements']
    disp_csvs.append(f'{set_name}/TARDIGRADE-MOOSE_{model}_{elements}_dynamic_displacement.csv')
    element_labels.append(elements)
# Displacement vs time
summary_script = "summarize_dynamic_displacements.py"
output_targets = ["all_dynamic_displacements.png", "all_dynamic_displacements.csv"]
plot_labels = [f'"{element} elements"' for element in element_labels]
script_options = f"--csv-files {' '.join(disp_csvs)}"
script_options += f" --plot-labels {' '.join(plot_labels)}"
script_options += f" --output-file {output_targets[0]}"
script_options += f" --output-csv {output_targets[1]}"
workflow.extend(env.PythonScript(
    target=output_targets,
    source=[f"{Tardigrade_MOOSE_source_abspath / summary_script}"] + disp_csvs,
    script_options=script_options
    ))

# Collector alias based on parent directory name
env.Alias(workflow_name, workflow)
